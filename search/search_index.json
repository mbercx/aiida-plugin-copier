{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":"<p>A <code>copier</code>-based template for AiiDA plugin packages.</p>"},{"location":"#usage","title":"Usage","text":"<p>Follow the <code>copier</code> installation instructions. Then simply run</p> <pre><code>copier copy https://github.com/mbercx/aiida-plugin-copier &lt;plugin_name&gt;\n</code></pre> <p>And answer the questions to generate a new AiiDA plugin package.</p>"},{"location":"design/","title":"Design","text":""},{"location":"design/#build-system","title":"Build system","text":"<p>This template uses Hatch as the build backend and project manager.</p> <pre><code>[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n</code></pre>"},{"location":"design/#why-choose-hatch","title":"\u2705 Why choose Hatch?","text":"<p>Hatch is a modern, PEP 517-compliant build backend. Main features:</p> <p>Tool consolidation</p> <p>Hatch can also manage virtual environments, test runners, and formatters (e.g. <code>hatch fmt</code>), reducing reliance on multiple tools.</p> <p>PEP 621 support</p> <p>Clean, declarative configuration in <code>pyproject.toml</code>. Keeping the number of configuration files minimal.</p> <p>Integrated versioning</p> <p>Instead of hardcoding the version number in <code>pyproject.toml</code>, we delegate it to a separate file (<code>__about__.py</code>) inside the source tree. This pattern has a few advantages:</p> <ul> <li>Single source of truth: The version lives inside your package, making it accessible at runtime via <code>import</code>.</li> <li>Tool-friendly: Hatch can automatically read and update this file using <code>[tool.hatch.version]</code>, supporting both static and dynamic versioning.</li> <li>Clean packaging: Keeps <code>pyproject.toml</code> minimal, and avoids cluttering the <code>__init__.py</code> with metadata.</li> </ul>"},{"location":"design/#documentation","title":"Documentation","text":"<p>We use MyST Markdown for our AiiDA plugin package documentation. We want to use a Markdown-based documentation tool for simplicity, avoiding Sphinx' reStructuredText format. The main reason to use this over MkDocs to test the Jupyter notebook integration, especially the \"executable content\". MyST is also easy to integrate with Sphinx, which has a lot of powerful tools, especially for scientific software.</p>"},{"location":"design/#devops","title":"DevOps","text":"<p>This template includes development automation tools that ensure code quality, consistency, and developer efficiency.</p>"},{"location":"design/#pre-commit-hooks","title":"Pre-commit hooks","text":"<p>We use <code>pre-commit</code> to run automated checks before each commit. The configuration is stored in <code>.pre-commit-config.yaml</code>, and only uses <code>hatch fmt</code> in two separate steps:</p> <ul> <li><code>hatch fmt -f</code></li> <li><code>hatch fmt -l</code></li> </ul> <p>The steps are separated in first formatting the code, then linting it to check for issues.</p>"},{"location":"developer/","title":"Developer Guide","text":"<p>Info</p> <p>Just to clarify: this guide is for developers of the <code>copier</code> template, not AiiDA plugin package developers.</p> <p>This template package uses several Hatch environments to execute developer tasks or \"scripts\". To see the environments and their corresponding scripts, run:</p> <pre><code>hatch env show\n</code></pre> <p>You can also find the definition of all the environments and their script in the <code>pyproject.toml</code>.</p> <p>Info</p> <p>Hatch creates its own isolated Python environments behind the scenes to run the corresponding scripts. This means your current environment will not be affected.</p>"},{"location":"developer/#default-template-scripts","title":"Default - Template scripts","text":"<p>The default Hatch environment defines a set of scripts related to the template, for example:</p> <pre><code>hatch run copy &lt;target_directory&gt;\n</code></pre> <p>Will copy the fully rendered template as the <code>aiida-test</code> package in the <code>&lt;target_directory&gt;</code>. Other scripts for the default environment:</p> <ul> <li><code>check</code>: Copy/Update the template in the <code>.tmp</code> directory and check the rendered files by linting them with <code>hatch fmt -l</code>.</li> <li><code>clean</code>: Remove the <code>.tmp</code> directory and any Ruff caches.</li> <li><code>docs</code>: Copy/Update the template in the <code>.tmp</code> directory and serve the documentation with <code>myst start</code>.</li> <li><code>install</code>: Copy/Update the template in the <code>.tmp</code> directory and install it with <code>uv pip install</code>.</li> </ul>"},{"location":"developer/#documentation","title":"Documentation","text":"<p>The <code>docs</code> Hatch environment can be used to <code>build</code>, <code>serve</code> and <code>deploy</code> the documentation of this template package (which you are reading right now). To run these scripts, you need to specify the <code>docs</code> environment in the <code>hatch run</code> command:</p> <pre><code>hatch run docs:serve\n</code></pre> <p>Warning</p> <p>The <code>docs:deploy</code> script will use <code>mkdocs gh-deploy</code> to deploy the documentation as a GitHub Pages website. This should rarely be done manually, since we have a GitHub Action set up to do this.</p>"}]}